// Gleichheits- und Relationsoperatoren prüfen, ob zwei Werte gleich, ungleich,
// kleiner als, größer als usw. sind. Sie werden zu true oder false ausgewertet.
let x = 2, y = 3;          // Diese =-Zeichen sind Zuweisungen, keine

let a = "foo", d = "bar";
//stelle in einem array -> 16 bit 

// a==b // =>true
// a===b // => false
// Gleichheitstests.
x === y                    // => false: Gleichheit.
x !== y                    // => true: Ungleichheit.
x < y                      // => true: kleiner als.
x <= y                     // => true: kleiner als oder gleich.
x > y                      // => false: größer als.
x >= y                     // => false: größer als oder gleich.
"two" === "three"          // => false: Die beiden Strings sind verschieden.
"two" > "three"            // => true: "tw" ist alphabetisch größer als "th".
false === (x > y)          // => true: false ist gleich false.
// Logische Operatoren kombinieren oder invertieren boolesche Werte:
//(x === 2) && (y === 3)     // => true: Beide Vergleiche sind wahr. && ist AND (UND).
//(x > 3) || (y < 3)         // => false: Keiner der Vergleiche ist wahr.
// || ist OR (ODER).
//!(x === y)                 // => true: ! invertiert einen booleschen Wert.

/*
AUFGABEN BEREICH
###############################################

Versuche eine Funktion zu schreiben
in der 2-3 Werte eines zuvor
erstellten Objekts verglichen werden.

zb. !!***(Psuedo-code)***!!
function compairCars (Auto1,Auto2)

    return
    (
        Auto1.Farbe == Auto2.Farbe &&
        Auto1.AnzahlTueren == Auto2.AnzahlTueren &&
        Auto1.Treibstoff != Auto2.Treibstoff
        )
}
      

###############################################
*/


function compairComputer(Computer1, Computer2) {
    return (
        Computer1.Marke === Computer2.Marke &&
        Computer1.RAM === Computer2.RAM &&
        Computer1.Festplattenkapazität === Computer2.Festplattenkapazität &&
        Computer1.Preis === Computer2.Preis
    );
}



class Auto {

    _marke = "defaultMark";
    _modell = "defaultModel";
    _baujahr = 1800;

    constructor(marke, modell, baujahr) {
      this._marke = marke;
      this._modell = modell;
      this._baujahr = baujahr;
    }

    compairCars(auto) {
        return (
            auto.marke ===  this._marke &&
            auto.modell === this._modell &&
            auto.baujahr === this._baujahr
        );
    }

    get marke(){
        return this._marke;
    }
    
    get modell(){
        return this._modell;
    }

    get baujahr(){
        return this._baujahr;
    }

    set modell(modell){
        this._modell=modell.toLocaleUpperCase();

      
    }

    set baujahr(baujahr){

        if (baujahr >= 1890 && baujahr <= 2023){
           this._baujahr=baujahr
        }
        else{
            console.error("kein gültiges baujahr")
        }
    }

  }


function  compairCars(auto1,auto2){
    return (
        auto1.marke ===  auto2.marke &&
        auto1.modell === auto2.modell &&
        auto1.baujahr === auto2.baujahr
    );
}


auto1 = new Auto("Mercedes","320",1830);
auto3 = new Auto("BMW","320","1989");
auto2 = new Auto("Audi","A3","1960");


console.log(auto1.compairCars(auto2));
console.log(auto1.compairCars(auto3));
auto1._baujahr = 1820;
console.log(auto1.baujahr);
console.log(auto1._marke.charAt(0))
;
console.log(auto1._marke.substring(1,4));
console.log(auto1._marke.indexOf("d"));
console.log(auto1._marke.includes("edde"));
